"""
Django settings for climanevada project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

from DB_PWD_SEC import database_config_prod

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9*0)1vlyf4ys3a@6nd^5ay1ih22e-+)fw2z=nqg@*$irbzc^az'


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['81.34.16.199','192.168.100.129', 'climanevada.obsnev.es', 'localhost', '10.60.174.45','192.168.40.128']

'''INTERNAL_IPS = (
    '127.0.0.1',
    '10.60.174.45',
    '192.168.100.129',
)'''

# Application definition

INSTALLED_APPS = [
    'dal',
    'dal_select2',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'bootstrap4',
    'leaflet',
    'core',
    'django_select2',
    'crispy_forms',
    'bootstrap_daterangepicker',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'climanevada.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TEMPLATE_DIRS = (
    os.path.join(BASE_DIR, "templates"),
)

CRISPY_TEMPLATE_PACK = 'bootstrap4'

BOOTSTRAP4 = {
    'include_jquery': True,
}

GDAL_LIBRARY_PATH = '/usr/lib/python3/dist-packages/osgeo/_gdal.cpython-38-x86_64-linux-gnu.so'

LEAFLET_CONFIG = {
        'TILES': [
                    ('Terrain', 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png', {}),
                    ('Google', 'http://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}', {}),
                    ('ESRI World Imagery', 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {}),  
                    ('CyclOSM', 'https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png', {}),
                    #('Topo Map', 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {}),          
                    #('Street Map', 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {}),
                 ],
    }

SERIALIZATION_MODULES = {
    "geojson": "django.contrib.gis.serializers.geojson", 
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    'select2': {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Set the cache backend to select2
SELECT2_CACHE_BACKEND = 'select2'

WSGI_APPLICATION = 'climanevada.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

#TIMESCALE_DB_BACKEND_BASE = "django.contrib.gis.db.backends.postgis"

DATABASES = database_config_prod()

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

if DEBUG:
    PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
    
    STATIC_URL = "/static/"
    MEDIA_URL = '/media/'

    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]

    STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

if not DEBUG:
    PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'

    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, "static"),
    )
    TEMPLATE_DIRS = (
        os.path.join(BASE_DIR, "core/templates"),
    )

    STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static',)
    MEDIA_ROOT =  os.path.join(BASE_DIR, "media"),